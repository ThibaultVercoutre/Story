import * as fs from 'fs';
import * as path from 'path';

interface SecurityVulnerability {
  type: 'high' | 'medium' | 'low' | 'info';
  category: string;
  description: string;
  file: string;
  line?: number;
  recommendation: string;
}

interface SecurityReport {
  summary: {
    total: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
  vulnerabilities: SecurityVulnerability[];
  recommendations: string[];
}

class SecurityScanner {
  private sourceDir: string;
  private vulnerabilities: SecurityVulnerability[] = [];

  constructor() {
    this.sourceDir = path.join(process.cwd(), 'src');
  }

  /**
   * Lance un scan de s√©curit√© complet
   */
  public async scanSecurity(): Promise<SecurityReport> {
    console.log('üîç Lancement du scan de s√©curit√©...\n');

    this.vulnerabilities = [];

    // Diff√©rents types de scans
    await this.scanHardcodedSecrets();
    await this.scanSqlInjectionVulnerabilities();
    await this.scanXssVulnerabilities();
    await this.scanAuthenticationWeaknesses();
    await this.scanInsecureConfigurations();
    await this.scanDependencyVulnerabilities();
    await this.scanPasswordSecurity();
    await this.scanDataExposure();

    const report = this.generateReport();
    this.printReport(report);

    return report;
  }

  /**
   * Scan pour les secrets hardcod√©s
   */
  private async scanHardcodedSecrets(): Promise<void> {
    console.log('üîê Recherche de secrets hardcod√©s...');

    const sensitivePatterns = [
      { pattern: /password\s*[:=]\s*['"]\w+['"]/, desc: 'Mot de passe hardcod√©' },
      { pattern: /secret\s*[:=]\s*['"]\w+['"]/, desc: 'Secret hardcod√©' },
      { pattern: /api[_-]?key\s*[:=]\s*['"]\w+['"]/, desc: 'Cl√© API hardcod√©e' },
      { pattern: /token\s*[:=]\s*['"]\w+['"]/, desc: 'Token hardcod√©' },
      { pattern: /jwt[_-]?secret\s*[:=]\s*['"]\w+['"]/, desc: 'Secret JWT hardcod√©' },
      { pattern: /db[_-]?password\s*[:=]\s*['"]\w+['"]/, desc: 'Mot de passe DB hardcod√©' },
    ];

    await this.scanFilesWithPatterns(sensitivePatterns, 'Secrets Hardcod√©s', 'high');
  }

  /**
   * Scan pour les vuln√©rabilit√©s d'injection SQL
   */
  private async scanSqlInjectionVulnerabilities(): Promise<void> {
    console.log('üíâ Recherche de vuln√©rabilit√©s d\'injection SQL...');

    const sqlPatterns = [
      { 
        pattern: /query\s*\(\s*['"]\s*\+/, 
        desc: 'Concat√©nation directe dans les requ√™tes SQL' 
      },
      { 
        pattern: /\$\{.*\}.*WHERE/i, 
        desc: 'Interpolation de template dans clause WHERE' 
      },
      { 
        pattern: /req\.(query|params|body)\.\w+.*WHERE/i, 
        desc: 'Param√®tres utilisateur directement dans SQL' 
      },
    ];

    await this.scanFilesWithPatterns(sqlPatterns, 'Injection SQL', 'high');
  }

  /**
   * Scan pour les vuln√©rabilit√©s XSS
   */
  private async scanXssVulnerabilities(): Promise<void> {
    console.log('üåê Recherche de vuln√©rabilit√©s XSS...');

    const xssPatterns = [
      { 
        pattern: /innerHTML\s*=\s*.*req\.(query|params|body)/, 
        desc: 'Insertion directe de donn√©es utilisateur dans HTML' 
      },
      { 
        pattern: /eval\s*\(/, 
        desc: 'Utilisation dangereuse d\'eval()' 
      },
      { 
        pattern: /dangerouslySetInnerHTML/, 
        desc: 'Utilisation de dangerouslySetInnerHTML' 
      },
    ];

    await this.scanFilesWithPatterns(xssPatterns, 'Cross-Site Scripting (XSS)', 'high');
  }

  /**
   * Scan pour les faiblesses d'authentification
   */
  private async scanAuthenticationWeaknesses(): Promise<void> {
    console.log('üîí Recherche de faiblesses d\'authentification...');

    const authPatterns = [
      { 
        pattern: /jwt\.sign\([^,]+,\s*['"]\w{1,10}['"]/, 
        desc: 'Secret JWT trop court (< 32 caract√®res recommand√©s)' 
      },
      { 
        pattern: /bcrypt\.hash\(\w+,\s*[1-9]\)/, 
        desc: 'Rounds bcrypt trop faibles (< 10 recommand√©s)' 
      },
      { 
        pattern: /session\s*:\s*{\s*secret\s*:\s*['"]\w{1,15}['"]/, 
        desc: 'Secret de session trop court' 
      },
    ];

    await this.scanFilesWithPatterns(authPatterns, 'Authentification', 'medium');
  }

  /**
   * Scan pour les configurations non s√©curis√©es
   */
  private async scanInsecureConfigurations(): Promise<void> {
    console.log('‚öôÔ∏è Recherche de configurations non s√©curis√©es...');

    const configPatterns = [
      { 
        pattern: /cors\(\{\s*origin\s*:\s*['"]\*['"]/, 
        desc: 'CORS configur√© pour accepter toutes les origines' 
      },
      { 
        pattern: /app\.use\(express\.static\(.*\)\).*\/\*/, 
        desc: 'Serveur de fichiers statiques trop permissif' 
      },
      { 
        pattern: /helmet\(\)/, 
        desc: 'Headers de s√©curit√© manquants (utiliser helmet.js)',
        invert: true 
      },
    ];

    await this.scanFilesWithPatterns(configPatterns, 'Configuration', 'medium');
  }

  /**
   * Scan pour les vuln√©rabilit√©s de d√©pendances
   */
  private async scanDependencyVulnerabilities(): Promise<void> {
    console.log('üì¶ V√©rification des d√©pendances...');

    const packageJsonPath = path.join(process.cwd(), 'package.json');
    
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

      // V√©rifier les d√©pendances obsol√®tes ou vuln√©rables
      const vulnerableDeps = [
        'request', // Deprecated
        'moment', // Vuln√©rabilit√©s connues, utiliser dayjs
        'lodash', // Versions anciennes vuln√©rables
      ];

      for (const dep of vulnerableDeps) {
        if (dependencies[dep]) {
          this.vulnerabilities.push({
            type: 'medium',
            category: 'D√©pendances',
            description: `D√©pendance potentiellement vuln√©rable: ${dep}`,
            file: 'package.json',
            recommendation: `Mettre √† jour ou remplacer ${dep} par une alternative s√©curis√©e`,
          });
        }
      }
    }
  }

  /**
   * Scan pour la s√©curit√© des mots de passe
   */
  private async scanPasswordSecurity(): Promise<void> {
    console.log('üîë V√©rification de la s√©curit√© des mots de passe...');

    const passwordPatterns = [
      { 
        pattern: /password.*length.*[1-7]/, 
        desc: 'Exigence de longueur de mot de passe trop faible' 
      },
      { 
        pattern: /md5|sha1(?!ng)/, 
        desc: 'Algorithme de hachage faible (MD5/SHA1)' 
      },
      { 
        pattern: /password.*===.*password/, 
        desc: 'Comparaison de mot de passe non s√©curis√©e' 
      },
    ];

    await this.scanFilesWithPatterns(passwordPatterns, 'S√©curit√© des Mots de Passe', 'high');
  }

  /**
   * Scan pour l'exposition de donn√©es sensibles
   */
  private async scanDataExposure(): Promise<void> {
    console.log('üîç Recherche d\'exposition de donn√©es sensibles...');

    const exposurePatterns = [
      { 
        pattern: /console\.log\(.*password.*\)/, 
        desc: 'Mot de passe potentiellement logg√©' 
      },
      { 
        pattern: /res\.json\(.*password.*\)/, 
        desc: 'Mot de passe potentiellement envoy√© en r√©ponse' 
      },
      { 
        pattern: /JSON\.stringify\(user\)/, 
        desc: 'Objet utilisateur complet s√©rialis√© (peut exposer des donn√©es)' 
      },
    ];

    await this.scanFilesWithPatterns(exposurePatterns, 'Exposition de Donn√©es', 'medium');
  }

  /**
   * Scan g√©n√©rique avec patterns
   */
  private async scanFilesWithPatterns(
    patterns: Array<{ pattern: RegExp; desc: string; invert?: boolean }>,
    category: string,
    severity: SecurityVulnerability['type']
  ): Promise<void> {
    const files = this.getAllTypeScriptFiles();

    for (const file of files) {
      const content = fs.readFileSync(file, 'utf8');
      const lines = content.split('\n');

      for (const { pattern, desc, invert = false } of patterns) {
        lines.forEach((line, index) => {
          const matches = pattern.test(line);
          if ((!invert && matches) || (invert && !matches && index === 0)) {
            this.vulnerabilities.push({
              type: severity,
              category,
              description: desc,
              file: path.relative(this.sourceDir, file),
              line: index + 1,
              recommendation: this.getRecommendation(category, desc),
            });
          }
        });
      }
    }
  }

  /**
   * R√©cup√®re tous les fichiers TypeScript
   */
  private getAllTypeScriptFiles(): string[] {
    const files: string[] = [];

    const scanDirectory = (dir: string): void => {
      const entries = fs.readdirSync(dir, { withFileTypes: true });

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);

        if (entry.isDirectory()) {
          if (!['node_modules', 'coverage', 'dist', '__tests__'].includes(entry.name)) {
            scanDirectory(fullPath);
          }
        } else if (entry.name.endsWith('.ts') && !entry.name.endsWith('.d.ts')) {
          files.push(fullPath);
        }
      }
    };

    scanDirectory(this.sourceDir);
    return files;
  }

  /**
   * G√©n√®re des recommandations sp√©cifiques
   */
  private getRecommendation(category: string, description: string): string {
    const recommendations: { [key: string]: string } = {
      'Secrets Hardcod√©s': 'Utiliser des variables d\'environnement (.env) pour les secrets',
      'Injection SQL': 'Utiliser des requ√™tes pr√©par√©es ou un ORM avec param√®tres bind√©s',
      'Cross-Site Scripting (XSS)': 'Valider et √©chapper toutes les entr√©es utilisateur',
      'Authentification': 'Utiliser des secrets forts et des algorithmes robustes',
      'Configuration': 'Appliquer le principe du moindre privil√®ge',
      'D√©pendances': 'Mettre √† jour les d√©pendances et utiliser npm audit',
      'S√©curit√© des Mots de Passe': 'Utiliser bcrypt avec au moins 12 rounds',
      'Exposition de Donn√©es': 'Ne jamais logger ou exposer de donn√©es sensibles',
    };

    return recommendations[category] || 'Consulter les bonnes pratiques de s√©curit√© OWASP';
  }

  /**
   * G√©n√®re le rapport final
   */
  private generateReport(): SecurityReport {
    const summary = {
      total: this.vulnerabilities.length,
      high: this.vulnerabilities.filter(v => v.type === 'high').length,
      medium: this.vulnerabilities.filter(v => v.type === 'medium').length,
      low: this.vulnerabilities.filter(v => v.type === 'low').length,
      info: this.vulnerabilities.filter(v => v.type === 'info').length,
    };

    const recommendations = [
      'Impl√©menter helmet.js pour les headers de s√©curit√©',
      'Configurer CSP (Content Security Policy)',
      'Utiliser HTTPS en production',
      'Impl√©menter la journalisation de s√©curit√©',
      'Effectuer des audits de s√©curit√© r√©guliers',
      'Mettre en place un pipeline de s√©curit√© CI/CD',
      'Former l\'√©quipe aux bonnes pratiques de s√©curit√©',
    ];

    return {
      summary,
      vulnerabilities: this.vulnerabilities,
      recommendations,
    };
  }

  /**
   * Affiche le rapport de s√©curit√©
   */
  private printReport(report: SecurityReport): void {
    console.log('\nüõ°Ô∏è RAPPORT DE S√âCURIT√â\n');
    console.log('=' .repeat(60));

    // R√©sum√©
    console.log('\nüìä R√âSUM√â:');
    console.log(`   Total: ${report.summary.total} probl√®mes d√©tect√©s`);
    console.log(`   üî¥ Critique: ${report.summary.high}`);
    console.log(`   üü° Moyen: ${report.summary.medium}`);
    console.log(`   üü¢ Faible: ${report.summary.low}`);
    console.log(`   ‚ÑπÔ∏è Info: ${report.summary.info}`);

    // Vuln√©rabilit√©s par cat√©gorie
    const byCategory = report.vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.category] = (acc[vuln.category] || 0) + 1;
      return acc;
    }, {} as { [key: string]: number });

    console.log('\nüìã PAR CAT√âGORIE:');
    Object.entries(byCategory).forEach(([category, count]) => {
      console.log(`   ${category}: ${count}`);
    });

    // D√©tails des vuln√©rabilit√©s critiques
    const criticalVulns = report.vulnerabilities.filter(v => v.type === 'high');
    if (criticalVulns.length > 0) {
      console.log('\nüî¥ VULN√âRABILIT√âS CRITIQUES:');
      criticalVulns.forEach((vuln, index) => {
        console.log(`\n   ${index + 1}. ${vuln.description}`);
        console.log(`      üìÅ Fichier: ${vuln.file}${vuln.line ? `:${vuln.line}` : ''}`);
        console.log(`      üí° Recommandation: ${vuln.recommendation}`);
      });
    }

    // Recommandations g√©n√©rales
    console.log('\nüí° RECOMMANDATIONS G√âN√âRALES:');
    report.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });

    // Score de s√©curit√©
    const securityScore = Math.max(0, 100 - (
      report.summary.high * 10 +
      report.summary.medium * 5 +
      report.summary.low * 2 +
      report.summary.info * 1
    ));

    console.log(`\nüìà SCORE DE S√âCURIT√â: ${securityScore}/100`);

    if (securityScore >= 90) {
      console.log('‚úÖ Excellente s√©curit√© !');
    } else if (securityScore >= 70) {
      console.log('‚ö†Ô∏è S√©curit√© acceptable, am√©liorations recommand√©es');
    } else {
      console.log('‚ùå Probl√®mes de s√©curit√© critiques √† r√©soudre');
    }

    console.log('\n' + '=' .repeat(60));
  }

  /**
   * Sauvegarde le rapport
   */
  public saveReport(report: SecurityReport, outputPath: string): void {
    const reportContent = {
      timestamp: new Date().toISOString(),
      summary: report.summary,
      vulnerabilities: report.vulnerabilities,
      recommendations: report.recommendations,
    };

    fs.writeFileSync(outputPath, JSON.stringify(reportContent, null, 2));
    console.log(`\nüìÑ Rapport sauvegard√©: ${outputPath}`);
  }
}

// Ex√©cution du script si appel√© directement
if (import.meta.url === new URL(process.argv[1], import.meta.url).href) {
  const scanner = new SecurityScanner();
  
  scanner.scanSecurity()
    .then(report => {
      const outputPath = path.join(process.cwd(), 'coverage', 'security-report.json');
      scanner.saveReport(report, outputPath);
      
      // Code de sortie bas√© sur les vuln√©rabilit√©s critiques
      if (report.summary.high > 0) {
        console.log('\n‚ùå Vuln√©rabilit√©s critiques d√©tect√©es');
        process.exit(1);
      } else if (report.summary.medium > 5) {
        console.log('\n‚ö†Ô∏è Trop de vuln√©rabilit√©s moyennes');
        process.exit(1);
      } else {
        console.log('\n‚úÖ Scan de s√©curit√© r√©ussi');
        process.exit(0);
      }
    })
    .catch(error => {
      console.error('‚ùå Erreur lors du scan de s√©curit√©:', error.message);
      process.exit(1);
    });
}

export { SecurityScanner }; 
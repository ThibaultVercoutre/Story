import { Request, Response } from 'express';
import { TestService } from '../services/test.service.js';
import { ResponseUtil } from '../utils/response.util.js';

export class TestController {
  /**
   * GET /api/test/users-full
   * GET /api/test/users-full?limit=10&offset=0&maxSagas=5&maxStories=3&maxChapitres=2&maxMorceaux=15
   * R√©cup√®re tous les users avec toutes leurs donn√©es imbriqu√©es
   * Route de test de performance pour le d√©chiffrement
   */
  public static async getAllUsersWithFullData(req: Request, res: Response): Promise<void> {
    try {
      // R√©cup√©rer les param√®tres de query
      const limit = parseInt(req.query.limit as string) || 5;
      const offset = parseInt(req.query.offset as string) || 0;
      const maxSagas = parseInt(req.query.maxSagas as string) || 3;
      const maxStories = parseInt(req.query.maxStories as string) || 2;
      const maxChapitres = parseInt(req.query.maxChapitres as string) || 2;
      const maxMorceaux = parseInt(req.query.maxMorceaux as string) || 10;

      // Validation des limites
      if (limit > 50) {
        ResponseUtil.error(res, 'Limite maximum: 50 utilisateurs pour √©viter les d√©passements m√©moire', 400);
        return;
      }

      console.log('üöÄ D√©marrage du test de performance avec limites...');
      
      const result = await TestService.getAllUsersWithFullData({
        limit,
        offset,
        maxSagas,
        maxStories,
        maxChapitres,
        maxMorceaux
      });
      
      console.log('‚úÖ Test de performance termin√©:', {
        users: result.stats.totalUsers,
        sagas: result.stats.totalSagas,
        stories: result.stats.totalStories,
        chapitres: result.stats.totalChapitres,
        morceauxTexte: result.stats.totalMorceauxTexte,
        tempsTotal: `${result.stats.executionTimeSeconds}s`,
        tempsRequ√™te: `${result.performance.queryTime}ms`,
        tempsD√©chiffrement: `${result.performance.decryptionTime}ms`,
        op√©rationsD√©chiffrement: result.performance.decryptionOperationsActual,
        erreursD√©chiffrement: result.performance.decryptionErrors
      });
      
      ResponseUtil.success(res, result, 
        `Test termin√© en ${result.stats.executionTimeSeconds}s (SQL: ${result.performance.queryTime}ms, D√©chiffrement: ${result.performance.decryptionTime}ms) - ${result.performance.decryptionOperationsActual} op√©rations de d√©chiffrement effectu√©es`
      );
    } catch (error) {
      console.error('‚ùå Erreur lors du test de performance:', error);
      ResponseUtil.handleError(res, error, 'le test de performance complet');
    }
  }

  /**
   * GET /api/test/users-full-dangerous
   * ‚ö†Ô∏è ROUTE DANGEREUSE - R√©cup√®re VRAIMENT toutes les donn√©es sans limite
   * √Ä utiliser seulement sur des bases de donn√©es de test avec peu de donn√©es
   */
  public static async getAllUsersFullDataDangerous(req: Request, res: Response): Promise<void> {
    try {
      console.log('‚ö†Ô∏è üöÄ D√âMARRAGE DU TEST DANGEREUX - TOUTES LES DONN√âES SANS LIMITE!');
      
      const result = await TestService.getAllUsersFullDataDangerous();
      
      console.log('‚úÖ Test dangereux termin√©:', {
        users: result.stats.totalUsers,
        sagas: result.stats.totalSagas,
        stories: result.stats.totalStories,
        chapitres: result.stats.totalChapitres,
        morceauxTexte: result.stats.totalMorceauxTexte,
        tempsTotal: `${result.stats.executionTimeSeconds}s`,
        tempsRequ√™te: `${result.performance.queryTime}ms`,
        tempsD√©chiffrement: `${result.performance.decryptionTime}ms`,
        op√©rationsD√©chiffrement: result.performance.decryptionOperationsActual,
        erreursD√©chiffrement: result.performance.decryptionErrors
      });
      
      ResponseUtil.success(res, result, 
        `‚ö†Ô∏è Test DANGEREUX termin√© en ${result.stats.executionTimeSeconds}s (SQL: ${result.performance.queryTime}ms, D√©chiffrement: ${result.performance.decryptionTime}ms) - ${result.performance.decryptionOperationsActual} op√©rations de d√©chiffrement SANS LIMITE`
      );
    } catch (error) {
      console.error('‚ùå Erreur lors du test dangereux:', error);
      ResponseUtil.handleError(res, error, 'le test de performance dangereux');
    }
  }

  /**
   * GET /api/test/stats
   * R√©cup√®re uniquement les statistiques sans les donn√©es
   * Pour un aper√ßu rapide des performances
   */
  public static async getPerformanceStats(req: Request, res: Response): Promise<void> {
    try {
      console.log('üìä R√©cup√©ration des statistiques de performance...');
      
      const result = await TestService.getPerformanceStats();
      
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', result.stats);
      
      ResponseUtil.success(res, result, 
        `Statistiques r√©cup√©r√©es en ${result.stats.executionTimeSeconds}s - ${result.stats.totalRecords} enregistrements au total`
      );
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      ResponseUtil.handleError(res, error, 'la r√©cup√©ration des statistiques');
    }
  }

  /**
   * GET /api/test/sample
   * GET /api/test/sample/:limit
   * Test de d√©chiffrement sur un √©chantillon limit√©
   * Pour tester les performances sans surcharger le syst√®me
   */
  public static async getTestSample(req: Request, res: Response): Promise<void> {
    try {
      const limit = parseInt(req.params.limit) || parseInt(req.query.limit as string) || 10;
      
      if (isNaN(limit) || limit < 1 || limit > 100) {
        ResponseUtil.error(res, 'La limite doit √™tre un nombre entre 1 et 100', 400);
        return;
      }
      
      console.log(`üî¨ D√©marrage du test sur √©chantillon de ${limit} utilisateurs...`);
      
      const result = await TestService.getTestSample(limit);
      
      console.log('‚úÖ Test d\'√©chantillon termin√©:', {
        utilisateurs: result.data.length,
        tempsTotal: `${result.performance.totalTime}ms`,
        tempsRequ√™te: `${result.performance.queryTime}ms`,
        tempsD√©chiffrement: `${result.performance.decryptionTime}ms`,
        op√©rationsD√©chiffrement: result.performance.decryptionOperationsActual,
        erreursD√©chiffrement: result.performance.decryptionErrors,
        moyenneParUser: `${result.performance.averageTimePerUser}ms`,
        moyenneD√©chiffrementParUser: `${result.performance.averageDecryptionPerUser}ms`
      });
      
      ResponseUtil.success(res, result, 
        `Test d'√©chantillon termin√© en ${result.performance.totalTime}ms (SQL: ${result.performance.queryTime}ms, D√©chiffrement: ${result.performance.decryptionTime}ms) - ${result.performance.decryptionOperationsActual} op√©rations de d√©chiffrement sur ${result.data.length} utilisateurs`
      );
    } catch (error) {
      console.error('‚ùå Erreur lors du test d\'√©chantillon:', error);
      ResponseUtil.handleError(res, error, 'le test d\'√©chantillon');
    }
  }

  /**
   * GET /api/test/health
   * V√©rification de l'√©tat du syst√®me avant les tests
   */
  public static async getHealthCheck(req: Request, res: Response): Promise<void> {
    try {
      const startTime = Date.now();
      
      // Test de connectivit√© basique
      const result = await TestService.getPerformanceStats();
      
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      const healthInfo = {
        status: 'healthy',
        database: 'connected',
        responseTime: `${responseTime}ms`,
        timestamp: new Date().toISOString(),
        totalRecords: result.stats.totalRecords,
        ready: true
      };
      
      ResponseUtil.success(res, healthInfo, 
        `Syst√®me op√©rationnel - ${result.stats.totalRecords} enregistrements disponibles`
      );
    } catch (error) {
      console.error('‚ùå Probl√®me de sant√© du syst√®me:', error);
      
      const healthInfo = {
        status: 'unhealthy',
        database: 'disconnected',
        timestamp: new Date().toISOString(),
        error: (error as any).message,
        ready: false
      };
      
      ResponseUtil.error(res, 'Syst√®me indisponible', 503, healthInfo as any);
    }
  }

  /**
   * GET /api/test/info
   * Informations sur les tests disponibles
   */
  public static async getTestInfo(req: Request, res: Response): Promise<void> {
    try {
      const testInfo = {
        availableTests: [
          {
            endpoint: '/api/test/users-full',
            description: 'Test de performance avec limites de s√©curit√©',
            defaultLimits: 'Par d√©faut: 5 users, 3 sagas, 2 stories, 2 chapitres, 10 morceaux',
            parameters: 'limit, offset, maxSagas, maxStories, maxChapitres, maxMorceaux',
            maxLimit: '50 utilisateurs maximum',
            recommended: '‚úÖ S√©curis√© - Recommand√©',
            method: 'GET'
          },
          {
            endpoint: '/api/test/users-full-dangerous',
            description: '‚ö†Ô∏è Test DANGEREUX - r√©cup√®re TOUTES les donn√©es sans limite',
            warning: 'üö® PEUT CRASHER NODE.JS - Utiliser seulement sur BDD de test',
            memoryRisk: 'Risque √©lev√© de d√©passement m√©moire',
            method: 'GET'
          },
          {
            endpoint: '/api/test/stats',
            description: 'Statistiques rapides - compte les enregistrements sans les r√©cup√©rer',
            performance: '‚ö° Tr√®s rapide',
            method: 'GET'
          },
          {
            endpoint: '/api/test/sample/:limit',
            description: 'Test sur √©chantillon - r√©cup√®re un nombre limit√© d\'utilisateurs',
            parameters: 'limit: nombre entre 1 et 100 (d√©faut: 10)',
            recommended: '‚úÖ Recommand√© pour les tests',
            method: 'GET'
          },
          {
            endpoint: '/api/test/health',
            description: 'V√©rification de l\'√©tat du syst√®me',
            purpose: 'üè• Diagnostic syst√®me',
            method: 'GET'
          }
        ],
        examples: [
          'GET /api/test/users-full?limit=10&maxSagas=5&maxStories=3',
          'GET /api/test/users-full?offset=10&limit=5',
          'GET /api/test/sample/20',
          'GET /api/test/stats'
        ],
        recommendations: [
          'Commencez par /api/test/health pour v√©rifier l\'√©tat',
          'Utilisez /api/test/stats pour voir le volume de donn√©es',
          'Testez avec /api/test/sample/5 avant le test complet',
          'Utilisez /api/test/users-full avec des limites raisonnables',
          '‚ö†Ô∏è √âVITEZ /api/test/users-full-dangerous sauf sur une BDD de test'
        ],
        performanceMetrics: [
          'Temps total d\'ex√©cution (ms et secondes)',
          'Temps de requ√™te SQL s√©par√© du d√©chiffrement',
          'Temps de d√©chiffrement pur (AES-GCM)',
          'Nombre d\'enregistrements r√©cup√©r√©s',
          'Op√©rations de d√©chiffrement r√©ellement effectu√©es',
          'Erreurs de d√©chiffrement d√©tect√©es',
          'Temps moyen par enregistrement',
          'Temps moyen de d√©chiffrement par enregistrement'
        ]
      };
      
      ResponseUtil.success(res, testInfo, 'Informations sur les tests de performance disponibles');
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des informations:', error);
      ResponseUtil.handleError(res, error, 'la r√©cup√©ration des informations de test');
    }
  }
} 